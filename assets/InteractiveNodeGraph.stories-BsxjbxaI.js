var C=Object.defineProperty;var I=(o,e,n)=>e in o?C(o,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[e]=n;var m=(o,e,n)=>I(o,typeof e!="symbol"?e+"":e,n);import{R as r,r as s}from"./index-CDs2tPxN.js";import{C as B}from"./Container-dTSXx2xM.js";import{u as N}from"./useDraggable-DSB2J76t.js";class D{constructor(){m(this,"points",new Map);m(this,"subscriptions",new Map)}registerBeacon(e){if(this.points.has(e)){console.warn("BeaconStore: Attempt to register duplicate beacon ID `%s`",e);return}this.points.set(e,null)}unregisterBeacon(e){if(!this.points.has(e)){console.warn("BeaconStore: Attempt to unregister unregistered beacon ID `%s`",e);return}this.points.delete(e)}reportBeaconPoint(e,n){if(!this.points.has(e)){console.warn("BeaconStore: Attempt to report unregistered beacon ID `%s`",e);return}this.points.set(e,n);const t=this.subscriptions.get(e);t&&t.forEach(i=>{i(n)})}subscribe(e,n){let t=this.subscriptions.get(e);t||this.subscriptions.set(e,t=new Set),t.add(n),this.points.has(e)&&this.points.get(e)&&n(this.points.get(e))}unsubscribe(e,n){const t=this.subscriptions.get(e);t&&(t.delete(n),t.size===0&&this.subscriptions.delete(e))}}const E=r.createContext(new D),w={a:1,b:0,c:0,d:1,e:0,f:0},F=(o,e)=>({x:e.a*o.x+e.c*o.y+e.e,y:e.b*o.x+e.d*o.y+e.f}),k=(o,e,n)=>{const t=o.getBBox(),i={x:t.x+t.width*e.x+n.x,y:t.y+t.height*e.y+n.y},a=o.getCTM()||w;return F(i,a)},A=({id:o,anchor:e={x:.5,y:.5},offset:n={x:0,y:0}})=>{const t=s.useContext(E),i=s.useRef(null);return s.useLayoutEffect(()=>(t.registerBeacon(o),()=>{t.unregisterBeacon(o)}),[]),s.useLayoutEffect(()=>{if(!i.current){t.reportBeaconPoint(o,null);return}const a=k(i.current,e,n);t.reportBeaconPoint(o,a)}),i},p=({id:o})=>{const e=s.useContext(E),[n,t]=s.useState(null);return s.useLayoutEffect(()=>(e.subscribe(o,t),()=>{e.unsubscribe(o,t)}),[]),n},u=({children:o,initialX:e,initialY:n})=>{const[t,i]=s.useState(null),[a,{x:b,y:g}]=N(t,e,n);return r.createElement("g",{transform:`translate(${b},${g})`,style:{cursor:a?"-webkit-grabbing":"-webkit-grab"},ref:i},r.createElement("rect",{x:"-60",y:"0",width:"120",height:"60",fill:"#FFF",stroke:"#3E4751",strokeWidth:"4",rx:"5",ry:"5"}),r.Children.map(o,f=>r.isValidElement(f)?r.cloneElement(f):null))},c=({id:o,x:e,y:n})=>{const t=A({id:o});return r.createElement("circle",{cx:e,cy:n,r:7,fill:"#3E4751",stroke:"#FFF",strokeWidth:3,ref:t})},d=({fromId:o,toId:e})=>{const n=p({id:o}),t=p({id:e});if(!n||!t)return null;const i=Math.max(Math.abs(t.y-n.y)*.4,30),a=`M${n.x} ${n.y} C ${n.x} ${n.y+i},${t.x} ${t.y-i},${t.x} ${t.y}`;return r.createElement("path",{d:a,fill:"none",stroke:"#3B6DF0",strokeWidth:4})},l=()=>r.createElement(B,null,r.createElement(d,{fromId:"A",toId:"B"}),r.createElement(d,{fromId:"A",toId:"D"}),r.createElement(d,{fromId:"C",toId:"F"}),r.createElement(d,{fromId:"E",toId:"G"}),r.createElement(u,{initialX:200,initialY:30},r.createElement(c,{id:"A",x:0,y:60})),r.createElement(u,{initialX:90,initialY:170},r.createElement(c,{id:"B",x:0,y:0}),r.createElement(c,{id:"C",x:0,y:60})),r.createElement(u,{initialX:310,initialY:170},r.createElement(c,{id:"D",x:0,y:0}),r.createElement(c,{id:"E",x:0,y:60})),r.createElement(u,{initialX:200,initialY:310},r.createElement(c,{id:"F",x:-24,y:0}),r.createElement(c,{id:"G",x:24,y:0}))),Y={title:"Interactive/Interactive Node Graph"};l.__docgenInfo={description:"",methods:[],displayName:"InteractiveNodeGraph"};var x,y,h;l.parameters={...l.parameters,docs:{...(x=l.parameters)==null?void 0:x.docs,source:{originalSource:`() => <Container>
        <Connection fromId="A" toId="B" />
        <Connection fromId="A" toId="D" />
        <Connection fromId="C" toId="F" />
        <Connection fromId="E" toId="G" />
        <Node initialX={200} initialY={30}>
            <Connector id="A" x={0} y={60} />
        </Node>
        <Node initialX={90} initialY={170}>
            <Connector id="B" x={0} y={0} />
            <Connector id="C" x={0} y={60} />
        </Node>
        <Node initialX={310} initialY={170}>
            <Connector id="D" x={0} y={0} />
            <Connector id="E" x={0} y={60} />
        </Node>
        <Node initialX={200} initialY={310}>
            <Connector id="F" x={-24} y={0} />
            <Connector id="G" x={24} y={0} />
        </Node>
    </Container>`,...(h=(y=l.parameters)==null?void 0:y.docs)==null?void 0:h.source}}};const M=["InteractiveNodeGraph"];export{l as InteractiveNodeGraph,M as __namedExportsOrder,Y as default};
